import telebot
import requests
from datetime import datetime, timedelta
import logging

# --- Configure Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Bot and API Setup ---
BOT_TOKEN = "8087879730:AAHTJ-wpf_cVubKltK5CH01pN6nySjqgTVU" # Replace with your actual bot token
NEWS_API_KEY = "14f2caad6e51442a8696ba72591278ea" # Replace with your News API key
bot = telebot.TeleBot(BOT_TOKEN)

# --- News Source and Data Handling ---
NEWS_API_ENDPOINT = f"https://newsapi.org/v2/everything?q=politics&sortBy=publishedAt&apiKey={NEWS_API_KEY}"

last_news_fetch_time = datetime.now() - timedelta(minutes=10)
cached_news = [] # Cache for storing news articles

# --- Define user_states dictionary ---
user_states = {}

def get_news():
    global last_news_fetch_time, cached_news
    current_time = datetime.now()
    time_difference = current_time - last_news_fetch_time

    try:
        if time_difference >= timedelta(minutes=5) or not cached_news: # Check cache or time
            logger.info("Fetching news from API...")
            response = requests.get(NEWS_API_ENDPOINT)
            response.raise_for_status()
            cached_news = response.json().get("articles", []) # Update cache
            last_news_fetch_time = current_time
            logger.info(f"Fetched {len(cached_news)} news articles.")
        else:
            logger.info("Using cached news.")

        return cached_news[:5] # Return slice from the cache

    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching news: {e}")
        return [] if not cached_news else cached_news[:5] # Return cached news if available

def format_news(articles):
    formatted_news = []
    for article in articles:
        title = article.get("title", "No title")
        url = article.get("url", "No URL")
        formatted_news.append(f"*{title}*\n[Read more]({url})")
    return "\n\n".join(formatted_news)

# --- Telegram Bot Commands and Logic ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    itembtn1 = telebot.types.KeyboardButton('/news')
    itembtn2 = telebot.types.KeyboardButton('/ask')
    itembtn3 = telebot.types.KeyboardButton('/search')
    itembtn4 = telebot.types.KeyboardButton('/exit')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4)
    bot.send_message(message.chat.id, "Welcome to the News Bot! Choose an option:", reply_markup=markup)

@bot.message_handler(commands=['news'])
def send_news_command(message):
    articles = get_news()
    if articles:
        news = format_news(articles)
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        try:
            bot.send_message(message.chat.id, f"Recent Political News ({current_time}):\n\n{news}", parse_mode="Markdown")
        except telebot.apihelper.ApiException as e:
            logger.error(f"Error sending message: {e}")
    else:
        bot.reply_to(message, "No news available at the moment. Try again later.")

@bot.message_handler(commands=['ask'])
def ask_question(message):
    user_states[message.chat.id] = "asking"
    bot.send_message(message.chat.id, "Please enter your question about the news:")

@bot.message_handler(commands=['search'])
def search_news(message):
    user_states[message.chat.id] = "searching"
    bot.send_message(message.chat.id, "Enter keywords to search for in the news:")

@bot.message_handler(commands=['exit'])
def exit_conversation(message):
    if message.chat.id in user_states:
        del user_states[message.chat.id]
    bot.send_message(message.chat.id, "Exiting conversation. Use /start or /help to begin again.", reply_markup=telebot.types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id] == "asking")
def handle_question(message):
    question = message.text
    relevant_articles = []
    for article in cached_news: # Search in cached news
        if question.lower() in article.get("title", "").lower() or question.lower() in article.get("description", "").lower():
            relevant_articles.append(article)

    if relevant_articles:
        response = format_news(relevant_articles)
    else:
        response = "I couldn't find any news related to your question. Please try again or /news to see the latest news."

    bot.send_message(message.chat.id, f"You asked: {question}\n\nHere's what I found:\n\n{response}", parse_mode="Markdown")
    del user_states[message.chat.id]

# --- Run the Bot (No scheduler) ---
if __name__ == "__main__":
    logger.info("Bot started.")
    bot.infinity_polling()
